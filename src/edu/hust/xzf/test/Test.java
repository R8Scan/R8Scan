package edu.hust.xzf.test;

import java.util.ArrayList;
import java.util.List;
import java.lang.annotation.Retention;
import java.lang.annotation.Annotation;
import java.util.function.Supplier;
import java.lang.annotation.RetentionPolicy;
// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1116527582L;
    public static volatile double dFld=0.23684;
    public float fFld=-1.187F;
    public static int iFld=-2495;

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(float f, int i5, int i6) {

        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 3576829860066334240L);

        lArr[(i5 >>> 1) % N] = i6;
        lArr[(i5 >>> 1) % N] = i6;
        Test.instanceCount <<= i6;
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }


    public static int method12() {
        // Using lambda expression and string concatenation
        int classIndex = 8;
        int count = 12;
        java.util.function.IntBinaryOperator sumOperator = (a, b) -> a + b;
        int sum = sumOperator.applyAsInt(classIndex, count);
        // Advanced switch expression
        int multiplier = switch (classIndex % 4) {
            case 0 ->
                    3;
            case 1 ->
                    4;
            case 2 ->
                    5;
            default ->
                    6;
        };
        // R8 desugaring feature: using var for local variable type inference
        var finalResult = sum * multiplier;
        return finalResult;
    }
    public static long lMeth(int i3, int i4, short s) {

        float f1=0.38F;
        double[] dArr =new double[N];
        byte[] byArr =new byte[N];String[] var1 = new String[]{ "x0", "x1", "x2", "x3", "x4", "x5", "x6" };
        c1211.main(var1);


        FuzzerUtils.init(dArr, 71.56607);
        FuzzerUtils.init(byArr, (byte)103);
        try {
            i3 = Test.method12();
        } catch (Exception eeeee) {}


        i4 = (int) (i4 - (Test.instanceCount + lMeth1(f1, i4, -25212)));
        dArr[(i3 >>> 1) % N] = 8;
        i3 += i4;
        byArr[(i3 >>> 1) % N] = (byte)i4;
        long meth_res = i3 + i4 + s + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }


    public static int method8(java.lang.String[] args) {
        java.lang.String bindTo = null;
        int roundtripCount = java.lang.Integer.parseInt(args[1]);
        int messageSize = java.lang.Integer.parseInt(args[2]);
        boolean rc = false;
        int n = 58;
        int i = 88;
        if (args.length != 3) {
            java.lang.System.out.println("Usage: java TplClass2365 <bindTo> <roundtripCount> <messageSize>");
            return -1;
        }
        bindTo = args[0];
        // Lambda expression for string concatenation
        java.util.function.Function<java.lang.String, java.lang.String> resultMessage = message -> (("Initial: " + message) + " and processed: ") + (message.length() * 2);
        // Advanced switch expression with more cases and complex conditions
        int switchResult = switch (messageSize) {
            case 1, 5 ->
                    10;
            case 2, 6 ->
                    20;
            case 3, 7 ->
                    30;
            case 4 ->
            {
                if (roundtripCount > 10) {
                    yield 40;
                } else {
                    yield 45;
                }
            }
            default ->
                    0;
        };
        // R8 desugaring feature: using var in lambda with more complex operation
        java.util.function.BiFunction<java.lang.Integer, java.lang.Integer, java.lang.Integer> lambdaResult = (x, y) -> {
            var temp = (x * 2) + (y * 3);
            return temp + switchResult;
        };
        for (i = 0; i != roundtripCount; i++) {
            if (n < 0) {
                break;
            }
            n = lambdaResult.apply(n, i);
            // Create a final copy of i for the lambda
            final int finalI = i;
            java.util.function.IntUnaryOperator additionalOp = value -> value + (finalI * 2);
            n = additionalOp.applyAsInt(n);
        }
        // String concatenation with lambda and more complex expression
        java.lang.String finalMessage = resultMessage.apply((("Final result: " + (((i + messageSize) + roundtripCount) + n)) + " with extra: ") + (n * i));
        java.lang.System.out.println(finalMessage);
        return ((i + messageSize) + roundtripCount) + n;
    }


    public static int method15() throws java.lang.Exception {
        int bitToTransfer = ((95 & (1 << 7)) != 0) ? 1 : 0;
        int incomingBit = -1;
        // Using lambda expression and string concat
        java.util.function.Supplier<java.lang.String> messageSupplier = () -> (("Processing bit: " + bitToTransfer) + " with incoming bit: ") + incomingBit;
        java.lang.System.out.println(messageSupplier.get());
        // Advanced switch expression
        int result = switch (bitToTransfer) {
            case 0 ->
            {
                int temp = incomingBit + 1;
                java.util.function.IntUnaryOperator incrementOp = val -> val + 1;
                temp = incrementOp.applyAsInt(temp);
                yield temp;
            }
            case 1 ->
            {
                int temp = incomingBit + 2;
                java.util.function.IntUnaryOperator multiplyOp = val -> val * 2;
                temp = multiplyOp.applyAsInt(temp);
                yield temp;
            }
            default ->
            {
                int temp = incomingBit;
                java.util.function.IntUnaryOperator negateOp = val -> -val;
                temp = negateOp.applyAsInt(temp);
                yield temp;
            }
        };
        // R8 desugaring feature: using var for local variable type inference
        var finalResult = result + bitToTransfer;
        java.util.function.IntUnaryOperator finalOp = val -> val + 5;
        finalResult = finalOp.applyAsInt(finalResult);
        return finalResult;
    }
    public static int method10(java.lang.String signature) {
        int index = 20;
        try {
            // Skip any type arguments to read argument declarations between '(' and ')'
            index = signature.indexOf('(') + 1;
            try {
                index = Test.method15();
            } catch (Exception eeeee) {}

            if (index <= 0) {
                throw new java.lang.Exception("Invalid signature format");
            }
            java.lang.String argumentDeclarations = signature.substring(index, signature.indexOf(')'));
            java.lang.String[] arguments = argumentDeclarations.split(";");
            java.lang.String concatenatedArguments = java.lang.String.join(", ", arguments);
            java.lang.String additionalInfo = "Processed arguments: ";
            java.lang.String finalMessage = additionalInfo.concat(concatenatedArguments);
            java.lang.System.out.println(finalMessage);
            // Advanced switch with lambda expression
            switch (arguments.length) {
                case 1 ->
                {
                    java.lang.Runnable oneArgAction = () -> java.lang.System.out.println("Exactly one argument detected");
                    oneArgAction.run();
                }
                case 2 ->
                {
                    java.lang.Runnable twoArgAction = () -> java.lang.System.out.println("Exactly two arguments detected");
                    twoArgAction.run();
                }
                default ->
                {
                    java.lang.Runnable manyArgAction = () -> java.lang.System.out.println("More than two arguments detected");
                    manyArgAction.run();
                }
            }
            // R8 desugaring feature: using lambda expression
            java.lang.Runnable printArguments = () -> {
                for (java.lang.String arg : arguments) {
                    java.lang.String argMessage = "Argument value: ".concat(arg);
                    java.lang.System.out.println(argMessage);
                }
            };
            printArguments.run();
            // Another lambda expression for argument length check
            java.lang.Runnable lengthCheck = () -> {
                if (arguments.length > 3) {
                    java.lang.System.out.println("There are more than three arguments");
                } else {
                    java.lang.System.out.println("There are three or fewer arguments");
                }
            };
            lengthCheck.run();
        } catch (java.lang.Exception e) {
            java.lang.System.out.println("Exception caught: " + e.getMessage());
        }
        return index;
    }
    public int iMeth(byte by, int i) {

        int i1=37214, i2=23853, i7=-53509, i8=-14;
        short s1=4322;
        boolean b=true;

        i -= i;
        i1 = 1;
        while (++i1 < 154) {
            i2 = 10;
            do {
                i = (int)(Long.reverseBytes(lMeth(i2, 7, s1)) + i);
                i = i;
                for (i7 = 1; i7 > -2; i7 -= 3) {
                    i += i8;
                    i8 = (int)fFld;
                    try {
                        java.lang.String var11 = "1.380190675584772E+31";
                        i2 = Test.method10(var11);
                    } catch (Exception eeeee) {}

                    b = b;
                    i8 += i7;
                    i <<= (int)-34L;
                    if (b) break;
                    fFld = i;
                }
                i += i2;
            } while (--i2 > 0);
            i8 = (int) Test.instanceCount;
        }
        long meth_res = by + i + i1 + i2 + s1 + i7 + i8 + (b ? 1 : 0);
        try {
            java.lang.String[] var9 = new java.lang.String[]{ "sss", "sss" };
            i8 = Test.method8(var9);
        } catch (Exception eeeee) {}

        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }


    public static int method2(int i, java.lang.String msg, java.lang.String extra, int multiplier) {
        // your code
        int result = switch (i) {
            case 10 ->
            {
                java.lang.String newMsg = msg.concat(" - Processed").concat(extra).transform(s -> s + " - Extended");
                yield newMsg.length() * multiplier;
            }
            case 15 ->
            {
                int sum = 0;
                for (char c : msg.toCharArray()) {
                    sum += c + 1;
                }
                int extraSum = 0;
                for (char c : extra.toCharArray()) {
                    extraSum += c + 2;
                }
                yield (sum + extraSum) * multiplier;
            }
            case 20 ->
            {
                int charSum = 0;
                char[] msgChars = msg.toCharArray();
                for (int j = 0; j < msgChars.length; j++) {
                    charSum += msgChars[j] + 1;
                }
                int extraCharSum = 0;
                char[] extraChars = extra.toCharArray();
                for (int k = 0; k < extraChars.length; k++) {
                    extraCharSum += extraChars[k] + 2;
                }
                yield (charSum + extraCharSum) * multiplier;
            }
            default ->
                    i * multiplier;
        };
        return result;
    }
    public void mainTest(String[] strArr1) {

        byte by1=-68;
        long l=2909756951211482040L, l1=-1823988523L;
        int i9=12;
        int i10=-2;
        int i12=7;
        int i13=110;
        int[] iArr =new int[N];
        int[][] iArr1 =new int[N][N];
        boolean b1=true;
        boolean[][] bArr =new boolean[N][N];
        short s2=24432;

        FuzzerUtils.init(iArr, 8554);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -50167);
        try {
            java.lang.String var4 = "sss";
            java.lang.String var5 = "sss";
            i13 = Test.method2(i10, var4, var5, i12);
        } catch (Exception eeeee) {}


        Test.dFld += (iMeth(by1, -8) - by1);String[] var0 = new String[]{ "x0", "x1", "x2", "x3", "x4", "x5" };
        c879.main(var0);

        Test.iFld -= Test.iFld;
        if (b1) {
            for (l = 5; l < 8; l++) {
                iArr[(int) (l + 1)] += Test.iFld;
            }
            Test.iFld = Test.iFld;
        } else if (b1) {
            bArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = b1;
        } else if (b1) {
            Test.iFld *= (int) Test.instanceCount;
            for (l1 = 16; l1 < 19; l1++) {
                if (b1) {
                    iArr[(int) (l1)] = Test.iFld;
                    fFld = i9;
                    fFld *= l1;
                } else {
                    fFld -= Test.iFld;String[] var14 = new String[]{ "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8" };
                    c234.main(var14);

                }
                iArr = iArr;
                i9 -= -31;
                switch (((Test.iFld >>> 1) % 5) + 103) {
                    case 103:
                        Test.instanceCount += (l1 + i9);
                        break;
                    case 104:
                        s2 *= (short) Test.iFld;
                        break;
                    case 105:
                        Test.instanceCount += (l1 * l1);
                        if (b1) {
                            if (false) {
                                fFld *= Test.iFld;
                            } else {
                                s2 += (short)(((l1 * i10) + l) - i9);
                                by1 /= (byte)(by1 | 1);String[] var7 = new String[]{ "x0", "x1", "x2", "x3", "x4" };
                                c1261.main(var7);

                            }
                            for (i12 = (int)(l1); i12 < 66; ++i12) {
                                if (true) {
                                    i9 *= (int) Test.instanceCount;
                                    fFld = s2;
                                    i9 += i13;
                                }
                            }
                        } else if (b1) {
                            i10 = i12;
                        }
                    case 106:
                        iArr1 = iArr1;
                        break;
                    case 107:
                        Test.iFld -= Test.iFld;
                        break;
                }
            }
        }

        FuzzerUtils.out.println("by1 l i9 = " + by1 + "," + l + "," + i9);
        FuzzerUtils.out.println("b1 l1 i10 = " + (b1 ? 1 : 0) + "," + l1 + "," + i10);
        FuzzerUtils.out.println("s2 i12 i13 = " + s2 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("iArr bArr iArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr) +
                "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
                Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iFld = " + Test.iFld);

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 1; i++ ) {
                _instance.mainTest(strArr);
            }
            System.out.println("over");

        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}

class c879 {
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
    public @interface KeptByIf {
        java.lang.String key() default "";
    }

    @c879.KeptByIf(key = "NestedClassKey")
    public static class NestedClass {
        final int foo = 42;

        public java.lang.String getNestedMessage() {
            return "Nested Message";
        }
    }

    public static class Main extends c879.NestedClass implements c879.KeptByIf {
        public static void main(java.lang.String[] args) {
            c879.Main.runKeptByIf(new c879.Main());
        }

        public static void runKeptByIf(c879.KeptByIf keptByIf) {
            java.lang.System.out.println(keptByIf.key());
        }

        @java.lang.Override
        public java.lang.String key() {
            return ("Hello World!" + " ") + getNestedMessage();
        }

        @java.lang.Override
        public java.lang.Class<? extends java.lang.annotation.Annotation> annotationType() {
            return null;
        }
    }

    public static void main(java.lang.String[] args) {
        java.lang.String expectedOutput = "Hello World! Nested Message";
        java.lang.String actualOutput = c879.testKeptByIf();
        java.lang.System.out.println("Expected Output: " + expectedOutput);
        java.lang.System.out.println("Actual Output: " + actualOutput);
        if (!expectedOutput.equals(actualOutput)) {
            throw new java.lang.AssertionError("Expected and actual outputs do not match.");
        }
    }

    public static java.lang.String testKeptByIf() {
        c879.Main mainInstance = new c879.Main();
        c879.Main.runKeptByIf(mainInstance);
        return mainInstance.key();
    }
}

class c1211 {
    public static void main(java.lang.String[] args) {
        java.util.List<c1211.InterfaceWithDefaultMethods> implementations = new java.util.ArrayList<>();
        implementations.add(new c1211.ClassImplementingInterface());
        implementations.add(new c1211.OtherClassImplementingInterface());
        implementations.add(new c1211.YetAnotherClassImplementingInterface());
        java.lang.String result = c1211.testInterfaceMethods(implementations);
        java.lang.System.out.println(result);
    }

    private static java.lang.String testInterfaceMethods(java.util.List<c1211.InterfaceWithDefaultMethods> implementations) {
        return implementations.stream().map(iface -> (iface.method() + " ") + iface.defaultMethod()).reduce((a, b) -> (a + "\n") + b).orElse("No implementations found");
    }

    interface InterfaceWithDefaultMethods {
        java.lang.String method();

        default java.lang.String defaultMethod() {
            return "DefaultMethod";
        }
    }

    static class ClassImplementingInterface implements c1211.InterfaceWithDefaultMethods {
        @java.lang.Override
        public java.lang.String method() {
            return "ClassImplementingInterface";
        }

        @java.lang.Override
        public java.lang.String defaultMethod() {
            return "OverriddenDefaultMethod";
        }
    }

    static class OtherClassImplementingInterface implements c1211.InterfaceWithDefaultMethods {
        @java.lang.Override
        public java.lang.String method() {
            return "OtherClassImplementingInterface";
        }
    }

    static class YetAnotherClassImplementingInterface implements c1211.InterfaceWithDefaultMethods {
        @java.lang.Override
        public java.lang.String method() {
            return "YetAnotherClassImplementingInterface";
        }

        @java.lang.Override
        public java.lang.String defaultMethod() {
            return switch (method()) {
                case "YetAnotherClassImplementingInterface" ->
                        "YetAnotherDefaultMethod";
                default ->
                        c1211.InterfaceWithDefaultMethods.super.defaultMethod();
            };
        }
    }
}

class c1261 {
    public static void main(java.lang.String[] args) {
        java.util.List<java.lang.String> expectedOutput1 = new java.util.ArrayList<>();
        expectedOutput1.add("methodTrue");
        expectedOutput1.add("true");
        expectedOutput1.add("methodFalse");
        expectedOutput1.add("false");
        java.util.List<java.lang.String> expectedOutput2 = new java.util.ArrayList<>();
        expectedOutput2.add("false");
        expectedOutput2.add("true");
        boolean testResult = c1261.testAssumenosideeffects5(expectedOutput1, expectedOutput2);
        java.lang.System.out.println("c1261 Result: " + testResult);
    }

    private static boolean testAssumenosideeffects5(java.util.List<java.lang.String> expectedOutput1, java.util.List<java.lang.String> expectedOutput2) {
        java.util.List<java.lang.String> actualOutput1 = new java.util.ArrayList<>();
        actualOutput1.add("methodTrue");
        actualOutput1.add("true");String[] var13 = new String[]{ "x0", "x1", "x2", "x3", "x4", "x5", "x6" };
        c447.main(var13);

        actualOutput1.add("methodFalse");
        actualOutput1.add("false");
        java.util.List<java.lang.String> actualOutput2 = new java.util.ArrayList<>();
        actualOutput2.add("false");
        actualOutput2.add("true");
        if (actualOutput1.equals(expectedOutput1) && actualOutput2.equals(expectedOutput2)) {
            return true;
        } else {
            return false;
        }
    }
}

class c447 {
    public static void main(java.lang.String[] args) {
        boolean condition = true;
        java.lang.String result = c447.testFieldAccess(condition);
        java.lang.System.out.println(result);
    }

    public static java.lang.String testFieldAccess(boolean condition) {
        java.util.function.Supplier<c447.A> aSupplier = (condition) ? c447::getA : () -> null;
        c447.A a = aSupplier.get();
        try {
            int fieldValue = a.field;
            return "Field accessed successfully: " + fieldValue;
        } catch (java.lang.NullPointerException e) {
            return "NullPointerException caught";
        }
    }

    public static c447.A getA() {
        return null;
    }

    public static class A {
        public int field = 1;
    }

    public static class B extends c447.A {
        public int field = 2;
    }

    public static class C extends c447.B {
        public int field = 3;
    }

    public static class D extends c447.C {
        public int field = 4;
    }
}

class c234 {
    public static void main(java.lang.String[] args) {
        c234.I b = c234.getB();
        if (b != null) {
            java.lang.System.out.println(b instanceof c234.I);// Check if 'b' is an instance of 'I'

            java.lang.System.out.println(b instanceof c234.A);// Check if 'b' is an instance of 'A'

            java.lang.System.out.println(b instanceof c234.B);// Check if 'b' is an instance of 'B'

        }
        java.lang.String result = c234.processString(b);
        java.lang.System.out.println(result);
        int value = c234.getValue(b);
        java.lang.System.out.println(value);
        switch (value) {
            case 1 ->
                    java.lang.System.out.println("Value is 1");
            case 2 ->
                    java.lang.System.out.println("Value is 2");
            default ->
                    java.lang.System.out.println("Value is neither 1 nor 2");
        }
    }

    static c234.I getB() {
        return new c234.B();// transformed into new B() in the test.

    }

    static java.lang.String processString(c234.I obj) {
        return obj instanceof c234.A ? "Instance of A" : obj instanceof c234.B ? "Instance of B" : "Unknown instance";
    }

    static int getValue(c234.I obj) {
        return obj instanceof c234.A ? 1 : obj instanceof c234.B ? 2 : 0;
    }

    interface I {}

    static class A implements c234.I {}

    static class B implements c234.I {
        void printMessage() {
            java.lang.System.out.println("Message from B");
        }
    }

    static class C extends c234.B {
        @java.lang.Override
        void printMessage() {
            java.lang.System.out.println("Message from C");
        }
    }
}
